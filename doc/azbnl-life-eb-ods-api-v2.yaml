openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:8080
  description: Generated server url
tags:
- name: Persons
  description: API for managing persons
paths:
  /api/v1/persons:
    get:
      tags:
      - Persons
      summary: Find persons
      description: Retrieve a paginated list of persons
      operationId: findPersons
      parameters:
        - name: nationalRegistrationNumber
          in: query
          description: The national registration number of the person
          schema:
            type: string
        - name: lastName
          in: query
          description: The last name of the person
          schema:
            type: string
        - name: page
          in: query
          description: The page number to retrieve
          schema:
            minimum: 0
            type: integer
            default: 0
        - name: pageSize
          in: query
          description:
            A limit on the number of objects to be returned. Can range between
            1 and 250.
          schema:
            maximum: 250
            minimum: 1
            type: integer
            default: 10
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PersonSearchResponse"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "4XX":
          $ref: "#/components/responses/4XXClientError"
        "5XX":
          $ref: "#/components/responses/5XXServerError"

    post:
      tags:
      - Persons
      summary: Create person
      description: Create a new person
      operationId: createPerson
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PersonCreateRequest"
      responses:
        "201":
          description: Person created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PersonSearchResponseItem"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "4XX":
          $ref: "#/components/responses/4XXClientError"
        "5XX":
          $ref: "#/components/responses/5XXServerError"
  /api/v1/persons/{personId}:
    get:
      tags:
      - Persons
      summary: Get person by ID
      description: Retrieve a person by their ID
      operationId: getPersonById
      parameters:
        - name: personId
          in: path
          required: true
          description: The ID of the person
          schema:
            type: integer
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PersonSearchResponseItem"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "404":
          $ref: "#/components/responses/404NotFound"
        "4XX":
          $ref: "#/components/responses/4XXClientError"
        "5XX":
          $ref: "#/components/responses/5XXServerError"
    put:
      tags:
      - Persons
      summary: Update person
      description: Update an existing person
      operationId: updatePerson
      parameters:
        - name: personId
          in: path
          required: true
          description: The ID of the person
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PersonUpdateRequest"
      responses:
        "200":
          description: Person updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PersonSearchResponseItem"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "404":
          $ref: "#/components/responses/404NotFound"
        "4XX":
          $ref: "#/components/responses/4XXClientError"
        "5XX":
          $ref: "#/components/responses/5XXServerError"
    delete:
      tags:
      - Persons
      summary: Delete person
      description: Delete a person by their ID
      operationId: deletePerson
      parameters:
        - name: personId
          in: path
          required: true
          description: The ID of the person
          schema:
            type: integer
      responses:
        "204":
          description: Person deleted
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "404":
          $ref: "#/components/responses/404NotFound"
        "4XX":
          $ref: "#/components/responses/4XXClientError"
        "5XX":
          $ref: "#/components/responses/5XXServerError"
components:
  responses:
    "201Created":
      description: Created
      headers:
        Location:
          description: the location url of the newly created resource
          schema:
            type: string
    "400BadRequest":
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ValidationErrorProblem"
        application/xml:
          schema:
            $ref: "#/components/schemas/ValidationErrorProblem"
    "401Unauthorized":
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Problem"
        application/xml:
          schema:
            $ref: "#/components/schemas/Problem"
    "403Forbidden":
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Problem"
        application/xml:
          schema:
            $ref: "#/components/schemas/Problem"
    "404NotFound":
      description: Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Problem"
        application/xml:
          schema:
            $ref: "#/components/schemas/Problem"
    "4XXClientError":
      description: ClientError
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Problem"
        application/xml:
          schema:
            $ref: "#/components/schemas/Problem"
    "5XXServerError":
      description: ServerError
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Problem"
        application/xml:
          schema:
            $ref: "#/components/schemas/Problem"
  schemas:
    Problem:
      type: object
      properties:
        instance:
          type: string
          format: uri
        type:
          type: string
          format: uri
        title:
          type: string
        status:
          type: integer
        detail:
          type: string
    ValidationError:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        category:
          type: string
        code:
          type: string
        additionalInformation:
          type: string
        remarks:
          type: string
        pointer:
          type: string

    ValidationErrorProblem:
      type: object
      properties:
        instance:
          type: string
          example: 00783eca-a434-11ea-bb37-0242ac130002
        type:
          type: string
        title:
          type: string
        status:
          type: integer
        detail:
          type: string
        errorList:
          type: array
          items:
            $ref: "#/components/schemas/ValidationError"

    PageableObject:
      type: object
      properties:
        unpaged:
          type: boolean
        offset:
          type: integer
        sort:
          $ref: "#/components/schemas/SortObject"
        paged:
          type: boolean
        pageNumber:
          type: integer
        pageSize:
          type: integer

    SortObject:
      type: object
      properties:
        empty:
          type: boolean
        sorted:
          type: boolean
        unsorted:
          type: boolean
    
    PersonSearchResponse:
      type: object
      allOf:
        - properties:
            content::
              type: array
              items:
                $ref: "#/components/schemas/PersonSearchResponseItem"
        - $ref: "#/components/schemas/PaginatedResponse"

    PersonSearchResponseItem:
      type: object
      properties:
        personId:
          type: number
          format: integer
          readOnly: true
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        nationalRegistrationNumber:
          type: string
          example: 2000-01-01-123-12

    PersonCreateRequest:
      type: object
      required:
        - firstName
        - lastName
        - nationalRegistrationNumber
      properties:
        firstName:
          type: string
        lastName:
          type: string
        nationalRegistrationNumber:
          type: string

    PersonUpdateRequest:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        nationalRegistrationNumber:
          type: string

    PaginatedResponse:
      type: object
      properties:
        totalSize:
          type: integer
          example: 100
        pageSize:
          type: integer
          example: 10
        pageCount:
          type: integer
          example: 10
        pageNumber:
          type: integer
          example: 1
        firstPageNumber:
          type: integer
        lastPageNumber:
          type: integer
        previousPageNumber:
          type: integer
        nextPageNumber:
          type: integer
        sortBy:
          type: string
        content:
          type: array
          items:
            type: object
